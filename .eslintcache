[{"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/Header.js":"1","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/SessionSetup.js":"2","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Notes.js":"3","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/App.js":"4","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/context/context.js":"5","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/styles.js":"6","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/SessionStudy.js":"7","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ModifyCard.js":"8","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ModifyDeck.js":"9","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Landing.js":"10","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/UserAlert.js":"11","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Syllabus.js":"12","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/functions/globalfxns.js":"13","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ViewDecks.js":"14"},{"size":2856,"mtime":1615073497889,"results":"15","hashOfConfig":"16"},{"size":7856,"mtime":1614205069187,"results":"17","hashOfConfig":"16"},{"size":18599,"mtime":1615341138555,"results":"18","hashOfConfig":"16"},{"size":1794,"mtime":1615240689088,"results":"19","hashOfConfig":"16"},{"size":7494,"mtime":1615240691873,"results":"20","hashOfConfig":"16"},{"size":12791,"mtime":1615341187164,"results":"21","hashOfConfig":"16"},{"size":13588,"mtime":1614238822195,"results":"22","hashOfConfig":"16"},{"size":5285,"mtime":1614217161993,"results":"23","hashOfConfig":"16"},{"size":6734,"mtime":1614217312683,"results":"24","hashOfConfig":"16"},{"size":1416,"mtime":1614219226293,"results":"25","hashOfConfig":"16"},{"size":2529,"mtime":1614056529222,"results":"26","hashOfConfig":"16"},{"size":1143,"mtime":1614055670693,"results":"27","hashOfConfig":"16"},{"size":915,"mtime":1614745080689,"results":"28","hashOfConfig":"16"},{"size":2806,"mtime":1614056330850,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fef7fl",{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/Header.js",["63","64","65","66"],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/SessionSetup.js",["67","68","69","70","71"],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Notes.js",["72","73","74","75"],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/App.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/context/context.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/styles.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/SessionStudy.js",["76","77","78","79","80"],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ModifyCard.js",["81","82"],"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { Context, actions } from '../context/context';\nimport { save, rando } from '../functions/globalfxns';\nimport { PageContainer, ContentContainer, Button, Input, Title, Text } from '../components/styles';\n\nconst ModifyCard = (props) => {\n    const [state, dispatch] = useContext(Context);\n    // ADD: 'difficulty' marker\n    const [card, setCard] = useState({\n      id: undefined,\n      type: '', // Thinking maybe can add optional 'type' like question, definition, etc. which could later be filtered for as well\n      categories: '',\n      topic: '',\n      front: '',\n      back: '',\n      creationTime: undefined\n    });\n    const [feedback, setFeedback] = useState({type: 'info', message: 'Time to MAKE A NEW CARD!'});\n    const focusRef = useRef(null);\n  \n  \n    function createNewCard() {\n      let creationFeedback = '';\n  \n      if (!card.categories.length) {\n        creationFeedback += `Please enter at least one category for this card, so you can search and sort for it later. `;\n      }\n      if (card.front.length < 1) {\n        creationFeedback += `Please ensure there's something written on the front of the card. `;\n      }\n  \n      if (creationFeedback.length) {\n        setFeedback({type: 'error', message: creationFeedback});\n        console.log(`I should be sharing the error: ${creationFeedback}`)\n        return;\n      } else {\n        \n        if (card.id) {\n          console.log(`Oh! This card already exists. We should modify it instead of creating it.`);\n          const indexToEdit = state.cards.findIndex(cardedit => cardedit.id === card.id);\n          dispatch({type: actions.EDIT_A_CARD, payload: {card: card, index: indexToEdit}});\n          setFeedback({type: 'info', message: `You have modified this card successfully!`});\n          return;\n        }\n  \n        const creationTime = new Date();\n        let finalizedCard = {...card};\n        if (!card.creationTime) {\n          finalizedCard = {...finalizedCard, creationTime: creationTime};\n        }\n        if (!card.id) {\n          let monthID = (creationTime.getMonth() + 1).toString();\n          if (parseInt(monthID) < 10) monthID = 0 + monthID;\n    \n          let dateID = creationTime.getDate().toString();\n          if (parseInt(dateID) < 10) dateID = 0 + dateID;\n    \n          let hoursID = creationTime.getHours();\n          if (parseInt(hoursID) < 10) hoursID = 0 + hoursID;\n          \n          let minutesID = creationTime.getMinutes().toString();\n          if (parseInt(minutesID) < 10) minutesID = 0 + minutesID;\n    \n          let secondsID = creationTime.getSeconds();\n          if (parseInt(secondsID) < 10) secondsID = 0 + secondsID;\n    \n          let randoID = rando(0,9).toString() + rando(0,9).toString() + rando(0,9).toString() + rando(0,9).toString();\n    \n          let creationID = creationTime.getFullYear().toString() + monthID + dateID + hoursID + minutesID + secondsID + randoID;\n          finalizedCard = {...finalizedCard, id: creationID};\n        }\n  \n        setFeedback({type: 'info', message: `You have created a new card! Clearing this page if you want to make a new one.`});\n        \n        dispatch({type: actions.ADD_NEW_CARD, payload: finalizedCard});\n  \n        setCard({...card, id: undefined, type: '', topic: '', front: '', back: '', creationTime: undefined});\n        focusRef.current.focus();\n      }\n  \n      \n    }\n  \n  \n    // HERE: useEffect [] on load to update initial user's WHAT IS DO\n    \n    // HERE: Another useEffect to update WHAT IS DO as user goes along and enters stuff\n  \n    // HERE: Yet another useEffect that checks any incoming params, if so, load up for EDIT MODE instead of CREATE MODE\n  \n    useEffect(() => {\n      dispatch({type: actions.UPDATE_WHATDO, payload: {page: '/modify_card', currentAction: {}}});\n    }, []);\n  \n    useEffect(() => {\n      save(state);\n    }, [state]);\n  \n    useEffect(() => {\n      if (props.location.state?.cardData) {\n        setCard({...props.location.state.cardData});\n      }\n    }, [props.location.state?.cardData]);\n  \n    return (\n      <PageContainer>\n        <Title roomy>Note Up a New Card</Title>\n  \n        <Text>Card Categories (as many as you'd like, separated by commas)</Text>\n        <ContentContainer row>\n          <Input type='text' doublewide value={card.categories} onChange={e => setCard({...card, categories: e.target.value})}></Input>\n          <Button tall elbowroom onClick={() => setCard({...card, categories: ''})}>Clear</Button>\n        </ContentContainer>\n\n        <Text>(Optional) Short Description of Card's Topic</Text>\n        <Input type='text' wide value={card.topic} onChange={e => setCard({...card, topic: e.target.value})}></Input>\n  \n        <Text>Front</Text>\n        <textarea className='create-card' ref={focusRef} value={card.front} rows='3' cols='50' onChange={e => setCard({...card, front: e.target.value})}></textarea>\n  \n        <Text>Back</Text>\n        <textarea className='create-card' value={card.back} rows='5' cols='50' onChange={e => setCard({...card, back: e.target.value})}></textarea>\n  \n        <Button roomy tall bold onClick={createNewCard}>{card.id ? 'Update Card' : 'Make New Card'}</Button>\n  \n      </PageContainer>\n    )\n}\n\nexport default ModifyCard;","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ModifyDeck.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Landing.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/components/UserAlert.js",["83","84"],"import React, { useContext, useState, useEffect } from 'react';\nimport { Context, actions } from '../context/context';\nimport { Title, Button, AlertContainer } from '../components/styles';\n\nconst UserAlert = () => {\n    const [state, dispatch] = useContext(Context);\n    const [alert, setAlert] = useState({duration: 0, type: 'info', message: ''});\n    const [alertStartTime, setAlertStartTime] = useState();\n\n    /*\n        WUT DO!\n        So, this should pop up a moderately attractive little informational box for the user when they need to know something.\n        -- short feedback only\n        -- dismissable by either time elapsed or user \"X\"\n        -- default length of time... let's say 15sec? We'll see how that feels, adjust as necessary\n        -- Basically, dispatch gets the thing, creates the alert, and then this component will process that (properly, hopefully)\n        \n        -- Just added backupAlerts to state... think about how to handle that later, whether a new alert just pushes the old one away, \n            or it just gets added to a stack? This app isn't that 'deep,' so may not need to get too complicated about it\n    */\n\n    useEffect(() => {\n        if (state.alert.duration > 0) {\n            // create new local alert\n            setAlert({...state.alert});\n            setAlertStartTime(new Date());\n        }\n        if (state.alert.duration === 0) {\n            // a little clumsy, but works for now: when dismissed, global state's duration is set to 0, so we reset local state's as well\n            setAlert({duration: 0, type: 'info', message: ''});\n        }\n    }, [state.alert]);\n\n    useEffect(() =>{\n        if (alert.duration > 0) {\n            const timer = setTimeout(() => {\n                setAlert({...alert, duration: alert.duration - 1});\n            }, 1000);\n                \n            \n            return () => clearTimeout(timer);\n        } else {\n            // Handle duration running out\n            dispatch({type: actions.DISMISS_ALERT});\n        }\n      }, [alert.duration]);\n\n    // Below: Be sure to enact multiple styling effects based on alert TYPE.\n    // Thinking SUCCESS, ERROR, INFO are the basic types!\n    return (\n        <>\n            {alert.duration > 0 &&\n            <AlertContainer>\n                <Title>{alert.message} (for {alert.duration})</Title>\n                <Button onClick={() => dispatch({type: actions.DISMISS_ALERT})}>Dismiss Alert</Button>\n            </AlertContainer>\n            }\n        </>\n    )\n}\n\nexport default UserAlert;","/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/Syllabus.js",["85","86","87","88","89"],"import React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Context, actions } from '../context/context';\nimport { save } from '../functions/globalfxns';\nimport { PageContainer, Title, ColumnContainer, Button, Text, Input } from '../components/styles';\n\nconst Syllabus = () => {\n    const [state, dispatch] = useContext(Context);\n    const [newSyllabusItem, setNewSyllabusItem] = useState('');\n\n    function addNewSyllabusItem() {\n        \n    }\n\n    return (\n        <PageContainer>\n            <Title>SYLLABUS</Title>\n            <ColumnContainer fullheight>\n                {state.syllabus.length > 0 && \n                    <></>\n                }\n                {state.syllabus.length === 0 &&\n                    <Text>You have no items to study yet! Add some here.</Text>\n                }\n                <Input type='text' value={newSyllabusItem} onChange={e => setNewSyllabusItem(e.target.value)}></Input>\n                <Button onClick={addNewSyllabusItem}>Add Study Item</Button>\n            </ColumnContainer>\n        </PageContainer>\n    )\n}\n\nexport default Syllabus;",["90","91"],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/functions/globalfxns.js",[],"/Users/ejdouglass/Desktop/code2020/foliostudybuddy/src/pages/ViewDecks.js",["92"],"import React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Context, actions } from '../context/context';\nimport { save } from '../functions/globalfxns';\nimport { PageContainer, Text, Title, BigDeck, Button, DeckCollection, ColumnContainer, RowContainer } from '../components/styles';\n\nconst ViewDecks = () => {\n    const [state, dispatch] = useContext(Context);\n    const history = useHistory();\n  \n    useEffect(() => {\n      dispatch({type: actions.UPDATE_WHATDO, payload: {page: '/view_decks', currentAction: {}}});\n    }, []);\n  \n    useEffect(() => {\n      save(state);\n    }, [state]);\n  \n    return (\n      <PageContainer>\n        <Title headroom>Your Decks</Title>\n        <DeckCollection>\n          {state.decks.map((deck, index) => (\n            <DeckPreview key={index} deck={deck} dispatch={dispatch} />\n          ))}\n          {state.decks.length === 0 && (\n            <ColumnContainer>\n              <Title>You have no decks assembled yet.</Title>\n              {state.cards.length !== 0 ? (\n                <Button onClick={() => history.push('/modify_deck')}>Let's Make Decks!</Button>\n              ) : (\n                <>\n                  <Text>For that matter, you have no cards, either, so let's start there!</Text>\n                  <Button onClick={() => history.push('/modify_card')}>Let's Make Cards!</Button>\n                </>\n              )}\n            </ColumnContainer>\n          )\n          }\n        </DeckCollection>\n      </PageContainer>\n    )\n}\n  \n\n\nconst DeckPreview = (props) => {\n    const {deck} = props;\n    const history = useHistory();\n    const dispatch = props.dispatch;\n    const [selected, setSelected] = useState(false);\n    const [deleteCandidate, setDeleteCandidate] = useState(false);\n  \n    return (\n      <BigDeck onMouseEnter={() => setSelected(true)} onMouseLeave={() => setSelected(false)}>\n        <Title white roomy>{deck.name}</Title>\n        <Title white>\n          Cards: {deck.cards.length}\n        </Title>\n\n        {(selected && !deleteCandidate) ? (\n          <RowContainer>\n            <Button onClick={() => history.push('/modify_deck', {deckData: deck})}>View/Edit</Button>\n            <Button onClick={() => setDeleteCandidate(true)}>Delete</Button>\n          </RowContainer>\n          ) : (\n            <RowContainer style={{height: '3.1rem'}}></RowContainer>\n          )\n        }\n\n        {deleteCandidate &&\n          <>\n            <Text>Are you sure you want to delete this deck?</Text>\n            <Button action onClick={() => dispatch({type: actions.REMOVE_A_DECK, payload: deck.id})}>DELETE</Button>\n            <Button onClick={() => setDeleteCandidate(false)}>No, Leave It</Button>\n          </>  \n        }\n      </BigDeck>\n    )\n}\n\nexport default ViewDecks;",{"ruleId":"93","severity":1,"message":"94","line":8,"column":12,"nodeType":"95","messageId":"96","endLine":8,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":19,"column":5,"nodeType":"99","endLine":32,"endColumn":6},{"ruleId":"97","severity":1,"message":"100","line":34,"column":5,"nodeType":"99","endLine":36,"endColumn":6},{"ruleId":"97","severity":1,"message":"101","line":60,"column":8,"nodeType":"102","endLine":60,"endColumn":18,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":25,"column":26,"nodeType":"106","messageId":"107","endLine":25,"endColumn":27,"fix":"108"},{"ruleId":"104","severity":1,"message":"105","line":32,"column":26,"nodeType":"106","messageId":"107","endLine":32,"endColumn":27,"fix":"109"},{"ruleId":"97","severity":1,"message":"110","line":70,"column":8,"nodeType":"102","endLine":70,"endColumn":10,"suggestions":"111"},{"ruleId":"97","severity":1,"message":"112","line":77,"column":8,"nodeType":"102","endLine":77,"endColumn":15,"suggestions":"113"},{"ruleId":"97","severity":1,"message":"114","line":86,"column":8,"nodeType":"102","endLine":86,"endColumn":20,"suggestions":"115"},{"ruleId":"93","severity":1,"message":"116","line":4,"column":207,"nodeType":"95","messageId":"96","endLine":4,"endColumn":211},{"ruleId":"93","severity":1,"message":"94","line":235,"column":12,"nodeType":"95","messageId":"96","endLine":235,"endColumn":17},{"ruleId":"97","severity":1,"message":"117","line":278,"column":8,"nodeType":"102","endLine":278,"endColumn":17,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":289,"column":65,"nodeType":"121","messageId":"122","endLine":289,"endColumn":66},{"ruleId":"97","severity":1,"message":"123","line":52,"column":5,"nodeType":"99","endLine":71,"endColumn":6},{"ruleId":"97","severity":1,"message":"124","line":73,"column":5,"nodeType":"99","endLine":75,"endColumn":6},{"ruleId":"97","severity":1,"message":"125","line":144,"column":8,"nodeType":"102","endLine":144,"endColumn":32,"suggestions":"126"},{"ruleId":"97","severity":1,"message":"127","line":190,"column":8,"nodeType":"102","endLine":190,"endColumn":42,"suggestions":"128"},{"ruleId":"97","severity":1,"message":"129","line":213,"column":8,"nodeType":"102","endLine":213,"endColumn":19,"suggestions":"130"},{"ruleId":"93","severity":1,"message":"131","line":18,"column":12,"nodeType":"95","messageId":"96","endLine":18,"endColumn":20},{"ruleId":"97","severity":1,"message":"110","line":93,"column":8,"nodeType":"102","endLine":93,"endColumn":10,"suggestions":"132"},{"ruleId":"93","severity":1,"message":"133","line":8,"column":12,"nodeType":"95","messageId":"96","endLine":8,"endColumn":26},{"ruleId":"97","severity":1,"message":"134","line":46,"column":10,"nodeType":"102","endLine":46,"endColumn":26,"suggestions":"135"},{"ruleId":"93","severity":1,"message":"136","line":1,"column":39,"nodeType":"95","messageId":"96","endLine":1,"endColumn":48},{"ruleId":"93","severity":1,"message":"137","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":20},{"ruleId":"93","severity":1,"message":"138","line":3,"column":19,"nodeType":"95","messageId":"96","endLine":3,"endColumn":26},{"ruleId":"93","severity":1,"message":"139","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":14},{"ruleId":"93","severity":1,"message":"140","line":8,"column":19,"nodeType":"95","messageId":"96","endLine":8,"endColumn":27},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"97","severity":1,"message":"110","line":13,"column":8,"nodeType":"102","endLine":13,"endColumn":10,"suggestions":"145"},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'handleKeyDown' function makes the dependencies of useCallback Hook (at line 14) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleKeyDown' in its own useCallback() Hook.","FunctionDeclaration","The 'handleKeyUp' function makes the dependencies of useCallback Hook (at line 17) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleKeyUp' in its own useCallback() Hook.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["146"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"147","text":"148"},{"range":"149","text":"148"},"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'sessionPrep'. Either include it or remove the dependency array. You can also do a functional update 'setSessionPrep(s => ...)' if you only need 'sessionPrep' in the 'setSessionPrep' call.",["151"],"React Hook useEffect has missing dependencies: 'sessionPrep' and 'state.decks'. Either include them or remove the dependency array. You can also do a functional update 'setSessionPrep(s => ...)' if you only need 'sessionPrep' in the 'setSessionPrep' call.",["152"],"'Word' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'props.index', 'props.subTopicIndex', and 'props.topicIndex'. Either include them or remove the dependency array.",["153"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","The 'handleKeyDown' function makes the dependencies of useCallback Hook (at line 47) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleKeyDown' in its own useCallback() Hook.","The 'handleKeyUp' function makes the dependencies of useCallback Hook (at line 50) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleKeyUp' in its own useCallback() Hook.","React Hook useEffect has missing dependencies: 'finishSession' and 'sessionData'. Either include them or remove the dependency array. You can also do a functional update 'setSessionData(s => ...)' if you only need 'sessionData' in the 'setSessionData' call.",["154"],"React Hook useEffect has a missing dependency: 'sessionData'. Either include it or remove the dependency array. You can also do a functional update 'setSessionData(s => ...)' if you only need 'sessionData' in the 'setSessionData' call.",["155"],"React Hook useEffect has missing dependencies: 'finishSession', 'sessionData.endAt', 'sessionData.endWhen', and 'sessionData.startTime'. Either include them or remove the dependency array.",["156"],"'feedback' is assigned a value but never used.",["157"],"'alertStartTime' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'alert' and 'dispatch'. Either include them or remove the dependency array. You can also do a functional update 'setAlert(a => ...)' if you only need 'alert' in the 'setAlert' call.",["158"],"'useEffect' is defined but never used.","'useHistory' is defined but never used.","'actions' is defined but never used.","'save' is defined but never used.","'dispatch' is assigned a value but never used.","no-native-reassign",["159"],"no-negated-in-lhs",["160"],["161"],{"desc":"162","fix":"163"},[1104,1105],"",[1405,1406],{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"164","fix":"178"},{"desc":"179","fix":"180"},"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"181"},"Update the dependencies array to be: [dispatch, history]",{"range":"182","text":"183"},"Update the dependencies array to be: [dispatch]",{"range":"184","text":"185"},"Update the dependencies array to be: [sessionPrep, state]",{"range":"186","text":"187"},"Update the dependencies array to be: [deckSearch, sessionPrep, state.decks]",{"range":"188","text":"189"},"Update the dependencies array to be: [dispatch, props.index, props.subTopicIndex, props.topicIndex, section]",{"range":"190","text":"191"},"Update the dependencies array to be: [finishSession, sessionData, sessionData.iterations]",{"range":"192","text":"193"},"Update the dependencies array to be: [props.location.state.sessionData, sessionData]",{"range":"194","text":"195"},"Update the dependencies array to be: [finishSession, sessionData.endAt, sessionData.endWhen, sessionData.startTime, studyTime]",{"range":"196","text":"197"},{"range":"198","text":"185"},"Update the dependencies array to be: [alert, alert.duration, dispatch]",{"range":"199","text":"200"},{"range":"201","text":"185"},[1860,1870],"[dispatch, history]",[2894,2896],"[dispatch]",[3215,3222],"[sessionPrep, state]",[3557,3569],"[deckSearch, sessionPrep, state.decks]",[13524,13533],"[dispatch, props.index, props.subTopicIndex, props.topicIndex, section]",[6186,6210],"[finishSession, sessionData, sessionData.iterations]",[7752,7786],"[props.location.state.sessionData, sessionData]",[8846,8857],"[finishSession, sessionData.endAt, sessionData.endWhen, sessionData.startTime, studyTime]",[3852,3854],[2023,2039],"[alert, alert.duration, dispatch]",[587,589]]